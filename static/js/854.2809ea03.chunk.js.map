{"version":3,"file":"static/js/854.2809ea03.chunk.js","mappings":"+TAGaA,EAAUC,EAAAA,EAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uKAWxBC,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,EAAPJ,CAAiBK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iGAOzBI,EAAON,EAAAA,EAAAA,IAAUO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,mOAejBM,EAAYR,EAAAA,EAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,6F,uCC6CnC,EApEqB,WACnB,IAAAQ,GAA8CC,EAAAA,EAAAA,KAC5C,SAAAC,GAAK,OAAIA,EAAMC,OAAO,IADhBC,EAASJ,EAATI,UAAWC,EAAKL,EAALK,MAAOC,EAAeN,EAAfM,gBAGpBC,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,GAAWC,EAAAA,EAAAA,MAOXC,EAAe,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAE,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC9BV,GAASW,EAAAA,EAAAA,GAA0BJ,IAAKK,MAAK,kBAC3CZ,GACEa,EAAAA,EAAAA,GAAmB,CACjBC,MACGjB,EAAgBkB,eAAiB,GAAKlB,EAAgBmB,UAAY,EAC/DnB,EAAgBoB,YAAc,EAC9BpB,EAAgBoB,cAEzB,IACD,wBAAAT,EAAAU,OAAA,GAAAZ,EAAA,KACH,gBAXoBa,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAA,KAiBrB,OAJAC,EAAAA,EAAAA,YAAU,WACRtB,GAASa,EAAAA,EAAAA,GAAmB,CAAEC,KAAM,IACtC,GAAG,CAACd,KAGFuB,EAAAA,EAAAA,KAAC3C,EAAO,CAAA4C,UACNC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAAAF,SAAA,EACZD,EAAAA,EAAAA,KAACvC,EAAK,CAAC2C,MAAM,cACZhC,GACC4B,EAAAA,EAAAA,KAACK,EAAAA,EAAM,IACLhC,GACF2B,EAAAA,EAAAA,KAAA,OAAAC,SAAM5B,IACJC,EAAgBgC,OAAOC,QACzBL,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAAP,SAAA,EACED,EAAAA,EAAAA,KAACpC,EAAI,CAAC6C,IAAKlC,EAAQ0B,SAChB3B,EAAgBgC,OAAOI,KAAI,SAAAJ,GAAM,OAChCN,EAAAA,EAAAA,KAACW,EAAAA,GAAcC,EAAAA,EAAAA,GAAA,CAEbjC,gBAAiBA,GACb2B,GAFCA,EAAOO,IAGZ,OAINb,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTpB,YAAapB,EAAgBoB,YAC7BqB,SAAUzC,EAAgBmB,QAC1BuB,WAAY1C,EAAgBkB,eAC5ByB,aA9CS,SAAAC,GAAQ,IAADC,EACX,QAAfA,EAAA5C,EAAQ6C,eAAO,IAAAD,GAAfA,EAAiBE,eAAe,CAAEC,SAAU,WAC5C7C,GAASa,EAAAA,EAAAA,GAAmB,CAAEC,KAAM2B,IACtC,QA+CQlB,EAAAA,EAAAA,KAAClC,EAAS,CAAAmC,UACRD,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAAAtB,SAAC,mDAQ5B,C","sources":["pages/FavoritePage/FavoritePage.styled.jsx","pages/FavoritePage/FavoritePage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport PageTitle from 'components/ReusableComponents/PageTitle/PageTitle';\n\nexport const Section = styled.section`\n  padding-bottom: 100px;\n\n  @media (min-width: 768px) {\n    padding-bottom: 200px;\n  }\n  @media (min-width: 1280px) {\n    padding-bottom: 100px;\n  }\n`;\n\nexport const Title = styled(PageTitle)`\n  margin-bottom: 50px;\n  @media (min-width: 768px) {\n    margin-bottom: 100px;\n  }\n`;\n\nexport const List = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  margin: 50px 0 40px;\n\n  @media (min-width: 768px) {\n    gap: 40px;\n    margin: 100px 0 50px;\n  }\n  @media (min-width: 1280px) {\n    gap: 50px;\n  }\n`;\n\nexport const EmptyInfo = styled.div`\n  margin-top: 50px;\n\n  @media (min-width: 768px) {\n    margin-top: 100px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react';\n\nimport Pagination from 'components/ReusableComponents/Pagination';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\nimport Loader from 'components/ReusableComponents/Loader';\nimport RecipeCardItem from 'components/ReusableComponents/RecipeCardItem';\n\nimport { EmptyInfo, List, Section, Title } from './FavoritePage.styled';\nimport getFavoriteRecipes from '../../redux/recipes/operations/getFavoriteRecipes';\nimport SearchCapImage from 'components/ReusableComponents/SearchCap';\nimport deleteFromFavoriteRecipes from '../../redux/recipes/operations/deleteFromFavoriteRecipes';\n\nconst FavoritePage = () => {\n  const { isLoading, error, favoriteRecipes } = useSelector(\n    state => state.recipes\n  );\n  const listRef = useRef(null);\n  const dispatch = useDispatch();\n\n  const handleChange = num => {\n    listRef.current?.scrollIntoView({ behavior: 'smooth' });\n    dispatch(getFavoriteRecipes({ page: num }));\n  };\n\n  const onDeleteHandler = async id => {\n    dispatch(deleteFromFavoriteRecipes(id)).then(() =>\n      dispatch(\n        getFavoriteRecipes({\n          page:\n            (favoriteRecipes.totalFavorites - 1) % favoriteRecipes.perPage === 0\n              ? favoriteRecipes.currentPage - 1\n              : favoriteRecipes.currentPage,\n        })\n      )\n    );\n  };\n\n  useEffect(() => {\n    dispatch(getFavoriteRecipes({ page: 1 }));\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <MainContainer>\n        <Title title=\"Favorites\" />\n        {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <div>{error}</div>\n        ) : favoriteRecipes.recipe.length ? (\n          <>\n            <List ref={listRef}>\n              {favoriteRecipes.recipe.map(recipe => (\n                <RecipeCardItem\n                  key={recipe._id}\n                  onDeleteHandler={onDeleteHandler}\n                  {...recipe}\n                />\n              ))}\n            </List>\n\n            <Pagination\n              currentPage={favoriteRecipes.currentPage}\n              pageSize={favoriteRecipes.perPage}\n              totalCount={favoriteRecipes.totalFavorites}\n              onPageChange={handleChange}\n            />\n          </>\n        ) : (\n          <EmptyInfo>\n            <SearchCapImage>\n              You don't have any favorite recipes yet.\n            </SearchCapImage>\n          </EmptyInfo>\n        )}\n      </MainContainer>\n    </Section>\n  );\n};\n\nexport default FavoritePage;\n"],"names":["Section","styled","_templateObject","_taggedTemplateLiteral","Title","PageTitle","_templateObject2","List","_templateObject3","EmptyInfo","_templateObject4","_useSelector","useSelector","state","recipes","isLoading","error","favoriteRecipes","listRef","useRef","dispatch","useDispatch","onDeleteHandler","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","id","_context","prev","next","deleteFromFavoriteRecipes","then","getFavoriteRecipes","page","totalFavorites","perPage","currentPage","stop","_x","apply","arguments","useEffect","_jsx","children","_jsxs","MainContainer","title","Loader","recipe","length","_Fragment","ref","map","RecipeCardItem","_objectSpread","_id","Pagination","pageSize","totalCount","onPageChange","num","_listRef$current","current","scrollIntoView","behavior","SearchCapImage"],"sourceRoot":""}